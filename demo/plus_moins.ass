; start main program
	TSTO #6
	BOV stack_overflow
	ADDSP #6
	LOAD #null, R0
	STORE R0, 1(GB)
	LOAD code.Object.equals, R0
	STORE R0, 2(GB)
; Beginning of main instructions:
; int mystery_number;
; int try_number = -1;
	LOAD #1, R2
	OPP R2, R2
	STORE R2, 4(GB)
; int n_try = 0;
	LOAD #0, R2
	STORE R2, 5(GB)
; int difficulty = -1;
	LOAD #1, R2
	OPP R2, R2
	STORE R2, 6(GB)
	WSTR "Bienvenue dans le jeu du plus ou moins!"
	WNL
; while instruction
	BRA while_cond_0
begin_while_0:
	WSTR "Choissisez une difficulte"
	WNL
	WSTR "1 : 1 - 10"
	WNL
	WSTR "2 : 1 - 100"
	WNL
	WSTR "3 : 1 - 1000"
	WNL
; difficulty = readInt()
	RINT
	BOV invalid_input
	LOAD R1, R2
	STORE R2, 6(GB)
; if instruction
	LOAD 6(GB), R2
	CMP #1, R2
	BLT end_and_0
	LOAD 6(GB), R2
	CMP #3, R2
	BLE else_0
end_and_0:
	WSTR "Difficulte invalide, reesayez"
	WNL
	BRA end_if_0
else_0:
end_if_0:
while_cond_0:
	LOAD 6(GB), R2
	CMP #1, R2
	BLT begin_while_0
	LOAD 6(GB), R2
	CMP #3, R2
	BGT begin_while_0
; if instruction
	LOAD 6(GB), R2
	CMP #1, R2
	BNE else_1
; mystery_number = 3
	LOAD #3, R2
	STORE R2, 3(GB)
	BRA end_if_1
else_1:
; if instruction
	LOAD 6(GB), R2
	CMP #2, R2
	BNE else_2
; mystery_number = 37
	LOAD #37, R2
	STORE R2, 3(GB)
	BRA end_if_2
else_2:
; if instruction
	LOAD 6(GB), R2
	CMP #1, R2
	BNE else_3
	BRA end_if_3
else_3:
; mystery_number = 137
	LOAD #137, R2
	STORE R2, 3(GB)
end_if_3:
end_if_2:
end_if_1:
; while instruction
	BRA while_cond_1
begin_while_1:
; n_try = n_try + 1
	LOAD 5(GB), R2
	ADD #1, R2
	STORE R2, 5(GB)
	WSTR "Essayez de deviner le nombre mystere"
	WNL
; try_number = readInt()
	RINT
	BOV invalid_input
	LOAD R1, R2
	STORE R2, 4(GB)
; if instruction
	LOAD 4(GB), R2
	CMP 3(GB), R2
	BLE else_4
	WSTR "Moins!"
	WNL
	BRA end_if_4
else_4:
; if instruction
	LOAD 4(GB), R2
	CMP 3(GB), R2
	BGE else_5
	WSTR "Plus!"
	WNL
	BRA end_if_5
else_5:
end_if_5:
end_if_4:
while_cond_1:
	LOAD 4(GB), R2
	CMP 3(GB), R2
	BNE begin_while_1
	WSTR "Bravo vous avez trouve le nombre mystere en "
; print(ln) n_try
	LOAD 5(GB), R2
	LOAD R2, R1
	WINT
	WSTR " coups!"
	WNL
	HALT
stack_overflow:
	WSTR "Error: Stack overflow"
	WNL
	ERROR
heap_overflow:
	WSTR "Error: Impossible allocation : heap overflow"
	WNL
	ERROR
div_by_zero:
	WSTR "Error: Division by zero"
	WNL
	ERROR
overflow:
	WSTR "Error: Overflow during arithmetic operation"
	WNL
	ERROR
invalid_input:
	WSTR "Error: Invalid input"
	WNL
	ERROR
null_object:
	WSTR "Error: Cannot acces null object"
	WNL
	ERROR
impossible_conv_float:
	WSTR "Error: Impossible converion to float"
	WNL
	ERROR
init.Object:
	RTS
code.Object.equals:
	TSTO #1
	BOV stack_overflow
	PUSH R2
	LOAD -2(LB), R2
	CMP -3(LB), R2
	SEQ R1
end.Object.equals:
	POP R2
	RTS
; end main program
